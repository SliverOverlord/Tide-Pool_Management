/*
  Tidepool
  
  This program will take the inputs from two switches and ultrasonic distance sensor to control 
  indicator lights as well as switch water pumped from one side to the other.  We want to have 
  the time between low and high tide roughly 6 hours 12.5 minutes.  We don't know exactly how 
  long it will take the little pumps to fill or drain.  So we will switch the valves from one side 
  to the other on a 5 minute cycle and record the final time.  Then we stay at high or low tide until 
  6.20833 hours is reached.
  
  You can change the default of whether the tide is rising when the microcontroller
  first initializes.
  
  The goal is to simulate a tidal cycle (~6.20833 hours)
  Inputs ---
  Pin 2: Lower switch +5V means water is too low
  Pin 3: High switch +5V means water is too high
  Pin 8: Reference (+5 V)
  Outputs ---
  Pin 09: Blue LED turn on when high switch is selected
  Pint 10: Green LED turn on when low switch is selected
  Pin 5: Servo to control 3-way valve on tide side pump  
  Pin 11: Servo to control 3-way valve on ray side pump
  
  Author: Steve Lindaas - based on circuit and original program idea by Ben LeMay
  Version 1.0 April 9 2018
  Additional Author: Paige Meyer
  Version 1.3 April 10 2018
  Additional Author: Josh DeNio
  Version 1.4 May 3 2019
*/

#include <Wire.h>
#include <Servo.h>
#include <rgb_lcd.h>
//#include <SoftwareSerial.h>
//#include <MemoryUsage.h>

# Initialize the LCD screen
rgb_lcd lcd;

boolean start;

// Pin constants won't change.

// high and low bobbers in the tide pool tank
const int InHigh =  3;
const int InLow  =  2;

// ultrasonic sensor pins in the tide pool tank
const int triggerPin = 6;  // Output
const int echoPin = 7;     // Input

// reference voltage pin - checking that analog voltage is being read correctly (needed?)
const int InRef  = 8;

// LEDs to show on or off
const int HighLED = 9;
const int LowLED  = 10;

// **Removed** pins to communicate with the Wi-Fi Breakout Board
//const int rxESPPin = 4;
//const int txESPPin = 5;

// NOTE: Don't have any on pin 13 as this pin goes high when reset
//const int PumpFill = 11;    // This pump fills the pool
//const int PumpDrain = 12;   // This pump empties the pool

// Create servo objects to control servos
// Servos use pins 5 and 11 as well as power supply
Servo tideServo;
Servo rayServo;

const int tidePWMpin = 5;
const int rayPWMpin = 11;

// Generally, use "unsigned long" for variables that hold time
// since the value will quickly become too large for an int to store
unsigned long startTime = 0;                        // store the tide half-cycle starting time
unsigned long previousTime = 0;                     // store the time since the pump was either turned on or off.

const unsigned long TideInterval = 6.208333 * 60 * 60 * 1000;    // 6 hours 12.5 minutes is the half-period of a tide (express in msec)
const unsigned long pumpOnTime = 5.0 * 60 * 1000;           // Valve is switched ON for 5 minutes
const unsigned long pumpOffTime = 5.0 * 60 * 1000;          // Valve is switched OFF for 5.0 minutes

// Tide state variables
boolean HighTide = false;          // Default lowering tide when you first turn on the system
boolean LowTide = false;
boolean Rising = false;
boolean PumpOn = true;

// variables to write about pump on
// These are used because they are the opposite of what most people would expect
const int writePumpOn = LOW;     // When pump is on, write low
const int writePumpOff = HIGH;   // When pump is off, write high

// Sensor varialbles - Initially set all the switches LOW (not tripped)
int sensorHigh = LOW;
int sensorLow = LOW;
int sensorRef = LOW;

// Set the last sensor states
int lastSensorHigh = sensorHigh;
int lastSensorLow = sensorLow;
int lastSensorRef = sensorRef;
unsigned long lastTimeHigh = 0;
unsigned long lastTimeLow = 0;
unsigned long lastTimeRef = 0;
unsigned long lastTimePulseHigh = 0;
unsigned long lastTimeLCDUpdated = 0;

const unsigned long debounceDelay = 100;
const unsigned long pulseDelay = 1000;       // delay a second before triggering the ultrasonic sensor
const unsigned long lcdDelay = 500;           // delay a half of a second between LCD updates

// Indicator light variables
unsigned long timeLED = 0;
int stateLED = LOW;             // ledState used to set the LED
long blinkLED = 500;           // interval at which to blink (milliseconds)
const long blinkFast = 150;
const long blinkSlow = 1000;

// ultrasonic sensor variables
unsigned long lastTimeUpdated = 0;
short delayUpdate = 3000;               // update only every 3000 milliseconds (3 seconds)

//SoftwareSerial WiFiESP(rxESPPin, txESPPin);       // add fake serial ports to Wi-Fi board

// Tidal Level Data
//int currentTideIndex = 0;           // current index in tideLevels
//const int tideLevelLength = 7471;   // length of tide Level array
// const int timeBetween = 6 * 60 * 1000; // 6 minute tidal level interval
// const short tideLevels[] = {-0.01, -0.02, -0.02, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.02, -0.01, -0.01, 0, 0.01, 0.02, 0.03, 0.05, 0.06, 0.07, 0.09, 0.11, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.27, 0.29, 0.31, 0.34, 0.36, 0.39, 0.41, 0.43, 0.46, 0.48, 0.51, 0.53, 0.55, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.73, 0.75, 0.77, 0.78, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.87, 0.88, 0.88, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.88, 0.88, 0.87, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.79, 0.78, 0.76, 0.75, 0.73, 0.71, 0.69, 0.67, 0.65, 0.63, 0.61, 0.59, 0.57, 0.55, 0.52, 0.5, 0.48, 0.45, 0.43, 0.41, 0.38, 0.36, 0.34, 0.32, 0.29, 0.27, 0.25, 0.23, 0.21, 0.19, 0.17, 0.15, 0.13, 0.12, 0.1, 0.09, 0.07, 0.06, 0.04, 0.03, 0.02, 0.01, 0, -0.01, -0.01, -0.02, -0.02, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.01, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.07, 0.09, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.25, 0.27, 0.29, 0.32, 0.34, 0.36, 0.39, 0.41, 0.44, 0.46, 0.48, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.64, 0.66, 0.67, 0.69, 0.71, 0.72, 0.74, 0.75, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.83, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.83, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.75, 0.74, 0.72, 0.7, 0.69, 0.67, 0.65, 0.63, 0.61, 0.59, 0.56, 0.54, 0.52, 0.5, 0.47, 0.45, 0.42, 0.4, 0.38, 0.35, 0.33, 0.3, 0.28, 0.26, 0.23, 0.21, 0.19, 0.17, 0.15, 0.13, 0.11, 0.09, 0.07, 0.06, 0.04, 0.03, 0.01, 0, -0.01, -0.02, -0.03, -0.04, -0.05, -0.05, -0.06, -0.06, -0.07, -0.07, -0.07, -0.07, -0.07, -0.07, -0.06, -0.06, -0.05, -0.04, -0.03, -0.02, -0.01, 0, 0.02, 0.03, 0.05, 0.06, 0.08, 0.1, 0.12, 0.14, 0.17, 0.19, 0.21, 0.23, 0.26, 0.28, 0.31, 0.34, 0.36, 0.39, 0.41, 0.44, 0.46, 0.49, 0.52, 0.54, 0.56, 0.59, 0.61, 0.63, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.77, 0.79, 0.8, 0.82, 0.83, 0.84, 0.86, 0.87, 0.88, 0.88, 0.89, 0.9, 0.9, 0.91, 0.91, 0.91, 0.92, 0.92, 0.91, 0.91, 0.91, 0.91, 0.9, 0.89, 0.89, 0.88, 0.87, 0.86, 0.85, 0.83, 0.82, 0.81, 0.79, 0.77, 0.76, 0.74, 0.72, 0.7, 0.68, 0.66, 0.63, 0.61, 0.59, 0.56, 0.54, 0.51, 0.49, 0.46, 0.44, 0.41, 0.39, 0.36, 0.34, 0.32, 0.29, 0.27, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.07, 0.05, 0.04, 0.02, 0.01, 0, -0.01, -0.03, -0.03, -0.04, -0.05, -0.05, -0.06, -0.06, -0.06, -0.06, -0.06, -0.06, -0.06, -0.05, -0.05, -0.04, -0.03, -0.02, -0.01, 0, 0.01, 0.03, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.23, 0.25, 0.28, 0.3, 0.33, 0.36, 0.38, 0.41, 0.43, 0.46, 0.49, 0.51, 0.54, 0.56, 0.59, 0.61, 0.63, 0.66, 0.68, 0.7, 0.72, 0.74, 0.75, 0.77, 0.79, 0.8, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.89, 0.9, 0.9, 0.91, 0.91, 0.91, 0.91, 0.9, 0.9, 0.9, 0.89, 0.89, 0.88, 0.87, 0.86, 0.85, 0.83, 0.82, 0.81, 0.79, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68, 0.66, 0.63, 0.61, 0.58, 0.56, 0.54, 0.51, 0.48, 0.46, 0.43, 0.41, 0.38, 0.35, 0.33, 0.3, 0.28, 0.25, 0.23, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.01, -0.01, -0.02, -0.03, -0.05, -0.06, -0.07, -0.07, -0.08, -0.09, -0.09, -0.1, -0.1, -0.1, -0.1, -0.1, -0.09, -0.09, -0.08, -0.08, -0.07, -0.06, -0.05, -0.04, -0.02, -0.01, 0.01, 0.03, 0.04, 0.06, 0.08, 0.1, 0.13, 0.15, 0.17, 0.2, 0.22, 0.25, 0.28, 0.3, 0.33, 0.36, 0.38, 0.41, 0.44, 0.46, 0.49, 0.52, 0.54, 0.57, 0.59, 0.62, 0.64, 0.66, 0.69, 0.71, 0.73, 0.75, 0.77, 0.78, 0.8, 0.82, 0.83, 0.84, 0.86, 0.87, 0.88, 0.89, 0.9, 0.9, 0.91, 0.91, 0.92, 0.92, 0.92, 0.92, 0.92, 0.92, 0.92, 0.91, 0.91, 0.9, 0.9, 0.89, 0.88, 0.87, 0.85, 0.84, 0.83, 0.81, 0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68, 0.65, 0.63, 0.61, 0.58, 0.56, 0.53, 0.51, 0.48, 0.46, 0.43, 0.41, 0.38, 0.35, 0.33, 0.3, 0.28, 0.25, 0.23, 0.21, 0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.03, 0.01, 0, -0.01, -0.03, -0.04, -0.05, -0.06, -0.06, -0.07, -0.07, -0.08, -0.08, -0.08, -0.08, -0.08, -0.08, -0.08, -0.07, -0.07, -0.06, -0.05, -0.04, -0.03, -0.01, 0, 0.02, 0.03, 0.05, 0.07, 0.09, 0.11, 0.14, 0.16, 0.18, 0.21, 0.23, 0.26, 0.28, 0.31, 0.34, 0.37, 0.39, 0.42, 0.45, 0.48, 0.5, 0.53, 0.56, 0.58, 0.61, 0.63, 0.66, 0.68, 0.7, 0.73, 0.75, 0.77, 0.79, 0.81, 0.82, 0.84, 0.85, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.93, 0.94, 0.94, 0.94, 0.95, 0.95, 0.94, 0.94, 0.94, 0.94, 0.93, 0.92, 0.91, 0.91, 0.89, 0.88, 0.87, 0.85, 0.84, 0.82, 0.81, 0.79, 0.77, 0.75, 0.73, 0.7, 0.68, 0.66, 0.63, 0.61, 0.58, 0.56, 0.53, 0.5, 0.48, 0.45, 0.42, 0.39, 0.37, 0.34, 0.31, 0.29, 0.26, 0.24, 0.21, 0.19, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0, -0.01, -0.03, -0.04, -0.05, -0.06, -0.07, -0.08, -0.09, -0.1, -0.1, -0.1, -0.11, -0.11, -0.11, -0.11, -0.1, -0.1, -0.1, -0.09, -0.08, -0.07, -0.06, -0.05, -0.04, -0.02, -0.01, 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.14, 0.16, 0.18, 0.21, 0.23, 0.26, 0.29, 0.32, 0.34, 0.37, 0.4, 0.42, 0.45, 0.48, 0.51, 0.53, 0.56, 0.58, 0.61, 0.63, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.79, 0.81, 0.82, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.9, 0.91, 0.91, 0.91, 0.91, 0.91, 0.91, 0.91, 0.91, 0.9, 0.9, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.81, 0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68, 0.66, 0.64, 0.61, 0.59, 0.56, 0.54, 0.51, 0.49, 0.46, 0.43, 0.41, 0.38, 0.36, 0.33, 0.31, 0.28, 0.26, 0.23, 0.21, 0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.05, 0.03, 0.01, 0, -0.01, -0.03, -0.04, -0.05, -0.06, -0.06, -0.07, -0.08, -0.08, -0.08, -0.08, -0.09, -0.08, -0.08, -0.08, -0.07, -0.07, -0.06, -0.05, -0.04, -0.03, -0.02, 0, 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.18, 0.2, 0.23, 0.25, 0.28, 0.31, 0.33, 0.36, 0.39, 0.42, 0.45, 0.47, 0.5, 0.53, 0.56, 0.58, 0.61, 0.64, 0.66, 0.69, 0.71, 0.73, 0.75, 0.78, 0.8, 0.81, 0.83, 0.85, 0.86, 0.88, 0.89, 0.91, 0.92, 0.93, 0.94, 0.94, 0.95, 0.96, 0.96, 0.96, 0.97, 0.97, 0.97, 0.96, 0.96, 0.96, 0.95, 0.94, 0.94, 0.93, 0.92, 0.91, 0.89, 0.88, 0.86, 0.85, 0.83, 0.81, 0.8, 0.78, 0.75, 0.73, 0.71, 0.69, 0.66, 0.64, 0.61, 0.59, 0.56, 0.53, 0.51, 0.48, 0.45, 0.42, 0.4, 0.37, 0.34, 0.32, 0.29, 0.26, 0.24, 0.21, 0.19, 0.17, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.03, 0.01, -0.01, -0.02, -0.03, -0.05, -0.06, -0.07, -0.07, -0.08, -0.09, -0.09, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.09, -0.09, -0.08, -0.07, -0.06, -0.05, -0.04, -0.03, -0.01, 0, 0.02, 0.04, 0.05, 0.07, 0.1, 0.12, 0.14, 0.16, 0.19, 0.21, 0.24, 0.26, 0.29, 0.32, 0.34, 0.37, 0.4, 0.42, 0.45, 0.48, 0.5, 0.53, 0.55, 0.58, 0.6, 0.63, 0.65, 0.67, 0.69, 0.71, 0.73, 0.75, 0.77, 0.78, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.88, 0.89, 0.89, 0.89, 0.89, 0.89, 0.89, 0.88, 0.88, 0.87, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.79, 0.78, 0.76, 0.74, 0.73, 0.71, 0.69, 0.67, 0.65, 0.62, 0.6, 0.58, 0.55, 0.53, 0.51, 0.48, 0.46, 0.43, 0.41, 0.38, 0.35, 0.33, 0.3, 0.28, 0.26, 0.23, 0.21, 0.19, 0.17, 0.14, 0.12, 0.11, 0.09, 0.07, 0.05, 0.04, 0.02, 0.01, 0, -0.01, -0.03, -0.04, -0.04, -0.05, -0.06, -0.06, -0.07, -0.07, -0.07, -0.07, -0.07, -0.07, -0.06, -0.06, -0.05, -0.04, -0.03, -0.02, -0.01, 0, 0.01, 0.03, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.19, 0.21, 0.24, 0.26, 0.29, 0.31, 0.34, 0.37, 0.4, 0.42, 0.45, 0.48, 0.51, 0.53, 0.56, 0.59, 0.61, 0.64, 0.66, 0.69, 0.71, 0.73, 0.76, 0.78, 0.8, 0.81, 0.83, 0.85, 0.87, 0.88, 0.89, 0.91, 0.92, 0.93, 0.94, 0.94, 0.95, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.95, 0.94, 0.94, 0.93, 0.92, 0.91, 0.9, 0.88, 0.87, 0.85, 0.84, 0.82, 0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.67, 0.65, 0.62, 0.6, 0.57, 0.55, 0.52, 0.5, 0.47, 0.44, 0.42, 0.39, 0.36, 0.34, 0.31, 0.29, 0.26, 0.24, 0.22, 0.19, 0.17, 0.15, 0.13, 0.11, 0.09, 0.07, 0.05, 0.04, 0.02, 0.01, 0, -0.02, -0.03, -0.04, -0.05, -0.05, -0.06, -0.07, -0.07, -0.07, -0.07, -0.07, -0.07, -0.07, -0.07, -0.07, -0.06, -0.05, -0.04, -0.04, -0.03, -0.01, 0, 0.01, 0.03, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.21, 0.23, 0.25, 0.28, 0.3, 0.33, 0.35, 0.38, 0.41, 0.43, 0.46, 0.48, 0.51, 0.53, 0.55, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.73, 0.75, 0.76, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.83, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.83, 0.82, 0.82, 0.81, 0.8, 0.79, 0.77, 0.76, 0.74, 0.73, 0.71, 0.7, 0.68, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.54, 0.51, 0.49, 0.47, 0.44, 0.42, 0.4, 0.37, 0.35, 0.33, 0.3, 0.28, 0.26, 0.24, 0.21, 0.19, 0.17, 0.15, 0.14, 0.12, 0.1, 0.08, 0.07, 0.06, 0.04, 0.03, 0.02, 0.01, 0, -0.01, -0.02, -0.02, -0.03, -0.03, -0.04, -0.04, -0.04, -0.04, -0.04, -0.03, -0.03, -0.02, -0.02, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.07, 0.09, 0.11, 0.12, 0.14, 0.17, 0.19, 0.21, 0.23, 0.25, 0.28, 0.3, 0.33, 0.35, 0.38, 0.41, 0.43, 0.46, 0.48, 0.51, 0.54, 0.56, 0.59, 0.61, 0.64, 0.66, 0.68, 0.71, 0.73, 0.75, 0.77, 0.79, 0.81, 0.82, 0.84, 0.85, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.93, 0.94, 0.94, 0.94, 0.95, 0.95, 0.94, 0.94, 0.94, 0.94, 0.93, 0.93, 0.92, 0.91, 0.9, 0.89, 0.88, 0.87, 0.85, 0.84, 0.82, 0.81, 0.79, 0.77, 0.75, 0.73, 0.71, 0.69, 0.67, 0.65, 0.63, 0.6, 0.58, 0.56, 0.53, 0.51, 0.48, 0.46, 0.43, 0.41, 0.38, 0.36, 0.33, 0.31, 0.29, 0.26, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.11, 0.09, 0.07, 0.06, 0.05, 0.04, 0.02, 0.01, 0, -0.01, -0.01, -0.02, -0.02, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.02, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.07, 0.08, 0.1, 0.12, 0.13, 0.15, 0.17, 0.19, 0.21, 0.23, 0.26, 0.28, 0.3, 0.32, 0.35, 0.37, 0.39, 0.42, 0.44, 0.46, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67, 0.68, 0.7, 0.71, 0.72, 0.74, 0.75, 0.76, 0.77, 0.78, 0.78, 0.79, 0.8, 0.8, 0.8, 0.8, 0.81, 0.81, 0.81, 0.8, 0.8, 0.8, 0.79, 0.79, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.69, 0.68, 0.66, 0.65, 0.63, 0.61, 0.6, 0.58, 0.56, 0.54, 0.52, 0.5, 0.48, 0.46, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.3, 0.28, 0.26, 0.24, 0.23, 0.21, 0.19, 0.17, 0.15, 0.14, 0.12, 0.11, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0, 0, 0, 0, 0.01, 0.01, 0.01, 0.02, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1, 0.11, 0.12, 0.14, 0.16, 0.17, 0.19, 0.21, 0.23, 0.25, 0.28, 0.3, 0.32, 0.34, 0.37, 0.39, 0.41, 0.44, 0.46, 0.49, 0.51, 0.54, 0.56, 0.58, 0.61, 0.63, 0.65, 0.67, 0.69, 0.71, 0.73, 0.75, 0.77, 0.79, 0.8, 0.81, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.9, 0.91, 0.91, 0.91, 0.91, 0.91, 0.91, 0.91, 0.91, 0.9, 0.9, 0.89, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.82, 0.81, 0.8, 0.78, 0.77, 0.75, 0.73, 0.72, 0.7, 0.68, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.53, 0.51, 0.49, 0.47, 0.44, 0.42, 0.4, 0.38, 0.35, 0.33, 0.31, 0.29, 0.27, 0.25, 0.23, 0.21, 0.19, 0.18, 0.16, 0.14, 0.13, 0.12, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.03, 0.03, 0.04, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.13, 0.14, 0.16, 0.17, 0.19, 0.21, 0.23, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.39, 0.41, 0.43, 0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.56, 0.58, 0.6, 0.62, 0.63, 0.65, 0.66, 0.67, 0.69, 0.7, 0.71, 0.71, 0.72, 0.73, 0.74, 0.74, 0.75, 0.75, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.75, 0.75, 0.74, 0.74, 0.73, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.63, 0.62, 0.6, 0.59, 0.57, 0.56, 0.54, 0.52, 0.5, 0.48, 0.47, 0.45, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.31, 0.29, 0.28, 0.26, 0.24, 0.22, 0.21, 0.19, 0.18, 0.16, 0.15, 0.14, 0.12, 0.11, 0.1, 0.09, 0.08, 0.08, 0.07, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.15, 0.16, 0.17, 0.19, 0.2, 0.22, 0.24, 0.26, 0.28, 0.29, 0.31, 0.33, 0.35, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67, 0.69, 0.7, 0.72, 0.74, 0.75, 0.77, 0.78, 0.79, 0.81, 0.82, 0.82, 0.83, 0.84, 0.85, 0.85, 0.86, 0.86, 0.86, 0.87, 0.87, 0.87, 0.87, 0.87, 0.86, 0.86, 0.85, 0.85, 0.84, 0.84, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.76, 0.74, 0.73, 0.71, 0.7, 0.68, 0.66, 0.65, 0.63, 0.61, 0.59, 0.57, 0.55, 0.54, 0.52, 0.49, 0.47, 0.46, 0.43, 0.41, 0.4, 0.38, 0.35, 0.34, 0.32, 0.3, 0.28, 0.26, 0.25, 0.23, 0.22, 0.2, 0.19, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.1, 0.09, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.08, 0.08, 0.09, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.2, 0.21, 0.23, 0.24, 0.26, 0.27, 0.29, 0.31, 0.33, 0.34, 0.36, 0.38, 0.4, 0.41, 0.43, 0.45, 0.47, 0.49, 0.5, 0.52, 0.54, 0.55, 0.57, 0.58, 0.6, 0.61, 0.62, 0.63, 0.65, 0.66, 0.66, 0.67, 0.68, 0.69, 0.69, 0.7, 0.7, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.7, 0.7, 0.7, 0.69, 0.69, 0.68, 0.67, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.59, 0.58, 0.57, 0.56, 0.54, 0.53, 0.51, 0.5, 0.48, 0.46, 0.45, 0.43, 0.41, 0.4, 0.38, 0.36, 0.35, 0.33, 0.31, 0.3, 0.28, 0.27, 0.25, 0.24, 0.22, 0.21, 0.2, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.12, 0.11, 0.11, 0.1, 0.1, 0.1, 0.09, 0.09, 0.09, 0.09, 0.09, 0.1, 0.1, 0.1, 0.1, 0.11, 0.12, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.23, 0.24, 0.26, 0.27, 0.29, 0.3, 0.32, 0.34, 0.36, 0.37, 0.39, 0.41, 0.43, 0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.56, 0.58, 0.6, 0.62, 0.64, 0.65, 0.67, 0.68, 0.7, 0.71, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.8, 0.81, 0.81, 0.81, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.8, 0.8, 0.79, 0.78, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.69, 0.68, 0.67, 0.65, 0.64, 0.62, 0.61, 0.59, 0.57, 0.56, 0.54, 0.52, 0.51, 0.49, 0.47, 0.45, 0.43, 0.42, 0.4, 0.38, 0.36, 0.35, 0.33, 0.32, 0.3, 0.28, 0.27, 0.26, 0.24, 0.23, 0.22, 0.21, 0.2, 0.18, 0.18, 0.17, 0.16, 0.15, 0.14, 0.14, 0.13, 0.13, 0.13, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.13, 0.13, 0.13, 0.14, 0.14, 0.15, 0.16, 0.17, 0.17, 0.18, 0.19, 0.2, 0.21, 0.23, 0.24, 0.25, 0.27, 0.28, 0.29, 0.31, 0.32, 0.34, 0.35, 0.37, 0.38, 0.4, 0.42, 0.43, 0.45, 0.46, 0.48, 0.49, 0.51, 0.52, 0.54, 0.55, 0.56, 0.57, 0.59, 0.6, 0.61, 0.62, 0.63, 0.63, 0.64, 0.65, 0.65, 0.66, 0.66, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.66, 0.66, 0.65, 0.65, 0.64, 0.63, 0.63, 0.62, 0.61, 0.6, 0.59, 0.58, 0.57, 0.56, 0.55, 0.54, 0.53, 0.51, 0.5, 0.49, 0.47, 0.46, 0.44, 0.43, 0.41, 0.4, 0.39, 0.37, 0.35, 0.34, 0.33, 0.31, 0.3, 0.28, 0.27, 0.26, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.17, 0.16, 0.15, 0.15, 0.14, 0.14, 0.14, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.14, 0.14, 0.14, 0.15, 0.15, 0.16, 0.16, 0.17, 0.18, 0.19, 0.2, 0.2, 0.21, 0.23, 0.24, 0.25, 0.26, 0.27, 0.29, 0.3, 0.32, 0.33, 0.35, 0.36, 0.38, 0.39, 0.41, 0.43, 0.45, 0.46, 0.48, 0.5, 0.51, 0.53, 0.55, 0.56, 0.58, 0.59, 0.61, 0.63, 0.64, 0.65, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.75, 0.76, 0.76, 0.77, 0.77, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.77, 0.77, 0.77, 0.76, 0.76, 0.75, 0.75, 0.74, 0.73, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.62, 0.61, 0.6, 0.58, 0.57, 0.55, 0.54, 0.52, 0.51, 0.49, 0.48, 0.46, 0.45, 0.43, 0.41, 0.4, 0.38, 0.37, 0.35, 0.34, 0.32, 0.31, 0.3, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.2, 0.19, 0.18, 0.18, 0.17, 0.17, 0.16, 0.16, 0.16, 0.16, 0.16, 0.15, 0.15, 0.16, 0.16, 0.16, 0.16, 0.16, 0.17, 0.17, 0.18, 0.18, 0.19, 0.19, 0.2, 0.21, 0.22, 0.23, 0.23, 0.24, 0.25, 0.27, 0.28, 0.29, 0.3, 0.31, 0.33, 0.34, 0.35, 0.37, 0.38, 0.4, 0.41, 0.42, 0.44, 0.45, 0.47, 0.48, 0.49, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.61, 0.62, 0.63, 0.63, 0.64, 0.64, 0.64, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.64, 0.64, 0.64, 0.63, 0.63, 0.62, 0.62, 0.61, 0.61, 0.6, 0.59, 0.58, 0.58, 0.57, 0.56, 0.55, 0.54, 0.53, 0.52, 0.51, 0.49, 0.48, 0.47, 0.46, 0.44, 0.43, 0.42, 0.4, 0.39, 0.38, 0.36, 0.35, 0.34, 0.32, 0.31, 0.3, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.2, 0.19, 0.18, 0.18, 0.17, 0.17, 0.17, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.17, 0.17, 0.17, 0.18, 0.18, 0.19, 0.19, 0.2, 0.21, 0.22, 0.22, 0.23, 0.24, 0.25, 0.26, 0.28, 0.29, 0.3, 0.31, 0.32, 0.34, 0.35, 0.37, 0.38, 0.4, 0.41, 0.43, 0.44, 0.46, 0.47, 0.49, 0.5, 0.52, 0.54, 0.55, 0.56, 0.58, 0.59, 0.61, 0.62, 0.63, 0.64, 0.66, 0.67, 0.68, 0.69, 0.69, 0.7, 0.71, 0.72, 0.72, 0.73, 0.73, 0.74, 0.74, 0.74, 0.74, 0.75, 0.75, 0.75, 0.75, 0.74, 0.74, 0.74, 0.74, 0.73, 0.73, 0.73, 0.72, 0.72, 0.71, 0.7, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6, 0.59, 0.57, 0.56, 0.55, 0.53, 0.52, 0.51, 0.49, 0.48, 0.46, 0.45, 0.43, 0.42, 0.4, 0.39, 0.38, 0.36, 0.35, 0.34, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.22, 0.21, 0.2, 0.2, 0.19, 0.19, 0.19, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.19, 0.19, 0.19, 0.2, 0.2, 0.21, 0.22, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.35, 0.36, 0.37, 0.39, 0.4, 0.41, 0.42, 0.44, 0.45, 0.46, 0.48, 0.49, 0.5, 0.51, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.58, 0.59, 0.6, 0.61, 0.61, 0.62, 0.62, 0.63, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.63, 0.63, 0.63, 0.62, 0.62, 0.61, 0.61, 0.6, 0.6, 0.59, 0.58, 0.57, 0.56, 0.56, 0.55, 0.54, 0.53, 0.51, 0.5, 0.49, 0.48, 0.47, 0.46, 0.44, 0.43, 0.42, 0.4, 0.39, 0.38, 0.36, 0.35, 0.34, 0.33, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.21, 0.2, 0.2, 0.19, 0.18, 0.18, 0.18, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.17, 0.18, 0.18, 0.18, 0.19, 0.19, 0.2, 0.2, 0.21, 0.22, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.32, 0.33, 0.34, 0.36, 0.37, 0.38, 0.4, 0.41, 0.43, 0.44, 0.46, 0.47, 0.49, 0.5, 0.52, 0.53, 0.55, 0.56, 0.57, 0.59, 0.6, 0.61, 0.62, 0.64, 0.65, 0.66, 0.67, 0.67, 0.68, 0.69, 0.7, 0.7, 0.71, 0.71, 0.72, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.71, 0.71, 0.7, 0.7, 0.69, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6, 0.59, 0.58, 0.56, 0.55, 0.54, 0.52, 0.51, 0.49, 0.48, 0.47, 0.45, 0.44, 0.42, 0.41, 0.4, 0.38, 0.37, 0.35, 0.34, 0.33, 0.32, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.23, 0.22, 0.21, 0.21, 0.2, 0.2, 0.19, 0.19, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.18, 0.19, 0.19, 0.2, 0.2, 0.21, 0.21, 0.22, 0.23, 0.24, 0.24, 0.26, 0.26, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.35, 0.36, 0.37, 0.39, 0.4, 0.41, 0.43, 0.44, 0.45, 0.47, 0.48, 0.49, 0.5, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.6, 0.61, 0.62, 0.62, 0.63, 0.64, 0.64, 0.64, 0.65, 0.65, 0.65, 0.65, 0.66, 0.66, 0.66, 0.66, 0.65, 0.65, 0.65, 0.65, 0.65, 0.64, 0.64, 0.63, 0.63, 0.62, 0.62, 0.61, 0.6, 0.59, 0.58, 0.58, 0.57, 0.56, 0.55, 0.54, 0.52, 0.51, 0.5, 0.49, 0.47, 0.46, 0.45, 0.43, 0.42, 0.41, 0.39, 0.38, 0.36, 0.35, 0.34, 0.33, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.24, 0.23, 0.23, 0.22, 0.21, 0.2, 0.2, 0.19, 0.18, 0.18, 0.17, 0.17, 0.17, 0.17, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.17, 0.17, 0.17, 0.17, 0.18, 0.18, 0.19, 0.19, 0.2, 0.21, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.29, 0.3, 0.31, 0.33, 0.34, 0.35, 0.37, 0.38, 0.4, 0.41, 0.43, 0.44, 0.46, 0.47, 0.49, 0.51, 0.52, 0.53, 0.55, 0.56, 0.58, 0.59, 0.6, 0.61, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.69, 0.7, 0.71, 0.71, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.74, 0.74, 0.74, 0.74, 0.74, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.71, 0.71, 0.7, 0.69, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.59, 0.58, 0.57, 0.56, 0.54, 0.53, 0.51, 0.5, 0.48, 0.47, 0.45, 0.44, 0.42, 0.41, 0.39, 0.38, 0.36, 0.35, 0.33, 0.32, 0.31, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.2, 0.19, 0.18, 0.18, 0.17, 0.17, 0.17, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.16, 0.17, 0.17, 0.17, 0.18, 0.18, 0.19, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.31, 0.32, 0.33, 0.35, 0.36, 0.38, 0.39, 0.41, 0.42, 0.43, 0.45, 0.46, 0.48, 0.49, 0.51, 0.52, 0.53, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.65, 0.66, 0.66, 0.67, 0.67, 0.68, 0.68, 0.68, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.66, 0.65, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6, 0.59, 0.58, 0.57, 0.56, 0.55, 0.53, 0.52, 0.51, 0.49, 0.48, 0.46, 0.45, 0.43, 0.42, 0.4, 0.39, 0.37, 0.35, 0.34, 0.33, 0.31, 0.3, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.21, 0.2, 0.2, 0.19, 0.18, 0.17, 0.17, 0.16, 0.15, 0.15, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.14, 0.15, 0.15, 0.15, 0.16, 0.17, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.27, 0.28, 0.29, 0.31, 0.32, 0.34, 0.35, 0.37, 0.39, 0.4, 0.42, 0.44, 0.45, 0.47, 0.49, 0.5, 0.52, 0.54, 0.55, 0.57, 0.58, 0.59, 0.61, 0.62, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.72, 0.73, 0.73, 0.74, 0.74, 0.75, 0.75, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.75, 0.75, 0.75, 0.75, 0.74, 0.74, 0.73, 0.72, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.62, 0.61, 0.6, 0.58, 0.57, 0.55, 0.54, 0.52, 0.51, 0.49, 0.47, 0.46, 0.44, 0.42, 0.4, 0.39, 0.37, 0.35, 0.34, 0.32, 0.31, 0.29, 0.28, 0.27, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.19, 0.18, 0.17, 0.16, 0.15, 0.15, 0.14, 0.14, 0.14, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.13, 0.14, 0.14, 0.14, 0.15, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.27, 0.28, 0.3, 0.31, 0.33, 0.34, 0.36, 0.37, 0.39, 0.41, 0.42, 0.44, 0.46, 0.47, 0.49, 0.51, 0.52, 0.54, 0.55, 0.57, 0.58, 0.59, 0.61, 0.62, 0.63, 0.64, 0.66, 0.67, 0.67, 0.68, 0.69, 0.7, 0.7, 0.71, 0.72, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.71, 0.7, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.6, 0.59, 0.58, 0.56, 0.55, 0.53, 0.52, 0.5, 0.48, 0.47, 0.45, 0.43, 0.41, 0.4, 0.38, 0.36, 0.34, 0.33, 0.31, 0.3, 0.28, 0.27, 0.25, 0.24, 0.22, 0.21, 0.2, 0.19, 0.17, 0.17, 0.15, 0.15, 0.14, 0.13, 0.12, 0.12, 0.11, 0.11, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.11, 0.11, 0.12, 0.12, 0.13, 0.14, 0.14, 0.15, 0.16, 0.17, 0.18, 0.2, 0.21, 0.22, 0.24, 0.25, 0.27, 0.28, 0.3, 0.32, 0.33, 0.35, 0.37, 0.39, 0.41, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.53, 0.55, 0.57, 0.58, 0.6, 0.62, 0.63, 0.65, 0.66, 0.67, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.74, 0.75, 0.76, 0.77, 0.77, 0.77, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.77, 0.77, 0.76, 0.75, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.66, 0.65, 0.64, 0.62, 0.6, 0.59, 0.57, 0.55, 0.54, 0.52, 0.5, 0.48, 0.46, 0.45, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.32, 0.3, 0.28, 0.27, 0.25, 0.23, 0.22, 0.21, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.11, 0.1, 0.1, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.1, 0.1, 0.1, 0.11, 0.12, 0.13, 0.14, 0.14, 0.15, 0.17, 0.18, 0.19, 0.2, 0.22, 0.23, 0.25, 0.26, 0.28, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.55, 0.57, 0.59, 0.6, 0.62, 0.64, 0.65, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.77, 0.78, 0.78, 0.78, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.78, 0.78, 0.78, 0.77, 0.76, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.66, 0.65, 0.63, 0.62, 0.6, 0.58, 0.57, 0.55, 0.53, 0.51, 0.49, 0.47, 0.45, 0.43, 0.41, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.28, 0.26, 0.25, 0.23, 0.21, 0.2, 0.18, 0.17, 0.16, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.09, 0.08, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.07, 0.07, 0.08, 0.09, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.16, 0.17, 0.18, 0.2, 0.21, 0.23, 0.25, 0.27, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.63, 0.65, 0.67, 0.68, 0.7, 0.71, 0.72, 0.73, 0.75, 0.76, 0.77, 0.77, 0.78, 0.79, 0.8, 0.8, 0.8, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.8, 0.8, 0.79, 0.79, 0.78, 0.77, 0.76, 0.76, 0.74, 0.73, 0.72, 0.71, 0.69, 0.68, 0.67, 0.65, 0.63, 0.62, 0.6, 0.58, 0.56, 0.54, 0.52, 0.5, 0.48, 0.46, 0.44, 0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.28, 0.26, 0.24, 0.22, 0.21, 0.19, 0.17, 0.16, 0.15, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.06, 0.05, 0.05, 0.05, 0.04, 0.04, 0.04, 0.04, 0.04, 0.05, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08, 0.09, 0.1, 0.11, 0.13, 0.14, 0.15, 0.17, 0.18, 0.2, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45, 0.47, 0.49, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.67, 0.69, 0.71, 0.72, 0.73, 0.75, 0.76, 0.77, 0.79, 0.8, 0.81, 0.81, 0.82, 0.83, 0.83, 0.84, 0.84, 0.84, 0.84, 0.85, 0.85, 0.85, 0.84, 0.84, 0.84, 0.83, 0.83, 0.82, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.76, 0.74, 0.73, 0.72, 0.7, 0.69, 0.67, 0.65, 0.63, 0.61, 0.59, 0.58, 0.56, 0.54, 0.51, 0.49, 0.47, 0.45, 0.43, 0.41, 0.38, 0.36, 0.34, 0.32, 0.3, 0.28, 0.26, 0.24, 0.22, 0.2, 0.18, 0.17, 0.15, 0.14, 0.12, 0.11, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.03, 0.03, 0.04, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.11, 0.12, 0.13, 0.15, 0.17, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.41, 0.43, 0.45, 0.47, 0.49, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.67, 0.69, 0.71, 0.72, 0.74, 0.75, 0.76, 0.77, 0.79, 0.79, 0.8, 0.81, 0.82, 0.82, 0.83, 0.83, 0.83, 0.84, 0.84, 0.84, 0.83, 0.83, 0.83, 0.82, 0.82, 0.81, 0.81, 0.8, 0.79, 0.78, 0.77, 0.76, 0.75, 0.73, 0.72, 0.71, 0.69, 0.67, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.54, 0.52, 0.5, 0.48, 0.45, 0.43, 0.41, 0.39, 0.36, 0.34, 0.32, 0.3, 0.28, 0.26, 0.23, 0.21, 0.2, 0.18, 0.16, 0.14, 0.13, 0.11, 0.1, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0, 0, 0, 0.01, 0.01, 0.01, 0.01, 0.02, 0.03, 0.04, 0.04, 0.05, 0.07, 0.08, 0.09, 0.1, 0.12, 0.13, 0.15, 0.17, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.31, 0.33, 0.35, 0.38, 0.4, 0.42, 0.45, 0.47, 0.49, 0.52, 0.54, 0.56, 0.59, 0.61, 0.63, 0.65, 0.67, 0.69, 0.71, 0.73, 0.75, 0.77, 0.78, 0.8, 0.81, 0.82, 0.84, 0.85, 0.86, 0.87, 0.88, 0.88, 0.89, 0.89, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.89, 0.89, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.8, 0.78, 0.77, 0.75, 0.73, 0.72, 0.7, 0.68, 0.66, 0.64, 0.62, 0.6, 0.58, 0.55, 0.53, 0.51, 0.48, 0.46, 0.44, 0.41, 0.39, 0.37, 0.34, 0.32, 0.3, 0.27, 0.25, 0.23, 0.21, 0.19, 0.17, 0.15, 0.13, 0.12, 0.1, 0.08, 0.07, 0.06, 0.04, 0.03, 0.02, 0.01, 0.01, 0, -0.01, -0.01, -0.01, -0.02, -0.02, -0.02, -0.02, -0.01, -0.01, -0.01, 0, 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.09, 0.1, 0.12, 0.14, 0.16, 0.17, 0.19, 0.21, 0.23, 0.26, 0.28, 0.3, 0.32, 0.34, 0.37, 0.39, 0.42, 0.44, 0.46, 0.49, 0.51, 0.53, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.71, 0.73, 0.75, 0.76, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.83, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.83, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.75, 0.74, 0.72, 0.71, 0.69, 0.68, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.53, 0.51, 0.49, 0.47, 0.44, 0.42, 0.4, 0.37, 0.35, 0.33, 0.3, 0.28, 0.26, 0.23, 0.21, 0.19, 0.17, 0.15, 0.13, 0.11, 0.1, 0.08, 0.06, 0.05, 0.04, 0.03, 0.01, 0, 0, -0.01, -0.02, -0.02, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.02, -0.01, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.07, 0.09, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.29, 0.31, 0.34, 0.36, 0.39, 0.41, 0.44, 0.46, 0.49, 0.51, 0.54, 0.56, 0.59, 0.61, 0.64, 0.66, 0.68, 0.71, 0.73, 0.75, 0.77, 0.79, 0.81, 0.82, 0.84, 0.86, 0.87, 0.88, 0.9, 0.91, 0.92, 0.92, 0.93, 0.94, 0.94, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.94, 0.94, 0.93, 0.93, 0.92, 0.91, 0.9, 0.89, 0.88, 0.87, 0.86, 0.84, 0.83, 0.81, 0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68, 0.66, 0.64, 0.62, 0.59, 0.57, 0.55, 0.52, 0.5, 0.47, 0.45, 0.42, 0.4, 0.37, 0.35, 0.32, 0.3, 0.27, 0.25, 0.23, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.09, 0.07, 0.06, 0.04, 0.03, 0.01, 0, -0.01, -0.01, -0.02, -0.03, -0.03, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.03, -0.03, -0.02, -0.01, -0.01, 0, 0.01, 0.03, 0.04, 0.05, 0.07, 0.08, 0.1, 0.12, 0.14, 0.15, 0.17, 0.19, 0.22, 0.24, 0.26, 0.28, 0.31, 0.33, 0.35, 0.38, 0.4, 0.43, 0.45, 0.48, 0.5, 0.52, 0.55, 0.57, 0.59, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.73, 0.75, 0.76, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.85, 0.85, 0.86, 0.86, 0.86, 0.86, 0.86, 0.85, 0.85, 0.84, 0.84, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.75, 0.74, 0.72, 0.71, 0.69, 0.67, 0.65, 0.63, 0.61, 0.59, 0.57, 0.55, 0.53, 0.5, 0.48, 0.46, 0.43, 0.41, 0.38, 0.36, 0.34, 0.31, 0.29, 0.26, 0.24, 0.22, 0.2, 0.17, 0.15, 0.13, 0.11, 0.09, 0.08, 0.06, 0.04, 0.03, 0.01, 0, -0.01, -0.02, -0.03, -0.04, -0.04, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.04, -0.04, -0.03, -0.02, -0.01, -0.01, 0.01, 0.02, 0.03, 0.05, 0.06, 0.08, 0.1, 0.11, 0.13, 0.15, 0.17, 0.2, 0.22, 0.24, 0.27, 0.29, 0.32, 0.34, 0.37, 0.39, 0.42, 0.45, 0.47, 0.5, 0.53, 0.55, 0.58, 0.61, 0.63, 0.66, 0.68, 0.71, 0.73, 0.75, 0.78, 0.8, 0.82, 0.84, 0.85, 0.87, 0.89, 0.9, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.97, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.97, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.9, 0.89, 0.87, 0.85, 0.84, 0.82, 0.8, 0.79, 0.77, 0.74, 0.72, 0.7, 0.68, 0.66, 0.64, 0.61, 0.59, 0.56, 0.54, 0.51, 0.49, 0.46, 0.43, 0.41, 0.38, 0.36, 0.33, 0.31, 0.28, 0.26, 0.23, 0.21, 0.19, 0.17, 0.14, 0.12, 0.1, 0.09, 0.07, 0.05, 0.04, 0.02, 0.01, 0, -0.01, -0.02, -0.03, -0.04, -0.04, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.04, -0.04, -0.03, -0.02, -0.01, 0, 0.01, 0.02, 0.04, 0.05, 0.07, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.27, 0.29, 0.31, 0.34, 0.36, 0.39, 0.41, 0.44, 0.46, 0.48, 0.51, 0.53, 0.56, 0.58, 0.6, 0.62, 0.65, 0.67, 0.69, 0.7, 0.72, 0.74, 0.76, 0.77, 0.78, 0.8, 0.81, 0.82, 0.83, 0.83, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.83, 0.82, 0.82, 0.81, 0.8, 0.79, 0.77, 0.76, 0.75, 0.73, 0.72, 0.7, 0.68, 0.67, 0.65, 0.63, 0.61, 0.59, 0.57, 0.54, 0.52, 0.5, 0.48, 0.45, 0.43, 0.4, 0.38, 0.36, 0.33, 0.31, 0.28, 0.26, 0.24, 0.21, 0.19, 0.17, 0.15, 0.13, 0.11, 0.09, 0.07, 0.05, 0.04, 0.02, 0.01, 0, -0.01, -0.03, -0.04, -0.04, -0.05, -0.05, -0.06, -0.06, -0.06, -0.06, -0.06, -0.06, -0.05, -0.05, -0.04, -0.03, -0.02, -0.01, 0, 0.01, 0.03, 0.04, 0.06, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19, 0.21, 0.24, 0.26, 0.29, 0.31, 0.34, 0.36, 0.39, 0.42, 0.45, 0.47, 0.5, 0.53, 0.56, 0.58, 0.61, 0.64, 0.66, 0.69, 0.71, 0.74, 0.76, 0.78, 0.81, 0.83, 0.85, 0.87, 0.88, 0.9, 0.92, 0.93, 0.94, 0.95, 0.97, 0.97, 0.98, 0.99, 0.99, 1, 1, 1, 1, 1, 1, 1, 0.99, 0.98, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.9, 0.89, 0.87, 0.86, 0.84, 0.82, 0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68, 0.65, 0.63, 0.61, 0.58, 0.56, 0.53, 0.51, 0.48, 0.46, 0.43, 0.4, 0.38, 0.35, 0.33, 0.3, 0.28, 0.25, 0.23, 0.21, 0.18, 0.16, 0.14, 0.12, 0.1, 0.09, 0.07, 0.05, 0.04, 0.02, 0.01, 0, -0.01, -0.02, -0.03, -0.03, -0.04, -0.04, -0.05, -0.05, -0.05, -0.05, -0.05, -0.04, -0.04, -0.04, -0.03, -0.02, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.07, 0.09, 0.11, 0.12, 0.14, 0.16, 0.18, 0.2, 0.23, 0.25, 0.27, 0.29, 0.32, 0.34, 0.36, 0.39, 0.41, 0.44, 0.46, 0.48, 0.51, 0.53, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.73, 0.75, 0.76, 0.78, 0.79, 0.8, 0.81, 0.81, 0.82, 0.83, 0.83, 0.83, 0.84, 0.84, 0.84, 0.84, 0.83, 0.83, 0.83, 0.82, 0.81, 0.81, 0.8, 0.79, 0.78, 0.77, 0.75, 0.74, 0.73, 0.71, 0.7, 0.68, 0.66, 0.64, 0.63, 0.61, 0.59, 0.57, 0.55, 0.53, 0.5, 0.48, 0.46, 0.43, 0.41, 0.39, 0.36, 0.34, 0.32, 0.29, 0.27, 0.25, 0.23, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.07, 0.05, 0.04, 0.02, 0.01, 0, -0.01, -0.02, -0.03, -0.04, -0.04, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.04, -0.04, -0.03, -0.02, -0.01, 0, 0.01, 0.02, 0.04, 0.05, 0.07, 0.09, 0.1, 0.12, 0.14, 0.16, 0.18, 0.21, 0.23, 0.25, 0.28, 0.3, 0.33, 0.35, 0.38, 0.4, 0.43, 0.46, 0.48, 0.51, 0.54, 0.57, 0.59, 0.62, 0.65, 0.67, 0.7, 0.72, 0.74, 0.77, 0.79, 0.81, 0.83, 0.85, 0.87, 0.89, 0.9, 0.92, 0.93, 0.95, 0.96, 0.97, 0.97, 0.98, 0.99, 0.99, 1, 1, 1, 1, 1, 1, 0.99, 0.99, 0.98, 0.97, 0.97, 0.96, 0.95, 0.94, 0.92, 0.91, 0.9, 0.88, 0.87, 0.85, 0.83, 0.82, 0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68, 0.65, 0.63, 0.61, 0.58, 0.56, 0.54, 0.51, 0.48, 0.46, 0.44, 0.41, 0.39, 0.36, 0.34, 0.31, 0.29, 0.27, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.09, 0.07, 0.06, 0.04, 0.03, 0.02, 0.01, 0, -0.01, -0.01, -0.02, -0.02, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.02, -0.01, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.07, 0.08, 0.1, 0.12, 0.13, 0.15, 0.17, 0.19, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31, 0.34, 0.36, 0.38, 0.41, 0.43, 0.45, 0.47, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.71, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.8, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.8, 0.8, 0.79, 0.78, 0.78, 0.77, 0.76, 0.75, 0.73, 0.72, 0.71, 0.69, 0.68, 0.66, 0.65, 0.63, 0.61, 0.6, 0.58, 0.56, 0.54, 0.52, 0.5, 0.48, 0.46, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.3, 0.28, 0.26, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.09, 0.07, 0.06, 0.04, 0.03, 0.02, 0.01, 0, -0.01, -0.02, -0.02, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.02, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.07, 0.08, 0.1, 0.11, 0.13, 0.15, 0.17, 0.19, 0.21, 0.23, 0.25, 0.28, 0.3, 0.33, 0.35, 0.37, 0.4, 0.42, 0.45, 0.48, 0.5, 0.53, 0.55, 0.58, 0.6, 0.63, 0.66, 0.68, 0.7, 0.73, 0.75, 0.77, 0.79, 0.81, 0.83, 0.85, 0.86, 0.88, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.96, 0.97, 0.97, 0.98, 0.98, 0.98, 0.98, 0.97, 0.97, 0.97, 0.96, 0.95, 0.95, 0.94, 0.93, 0.92, 0.91, 0.9, 0.89, 0.87, 0.86, 0.84, 0.83, 0.81, 0.8, 0.78, 0.76, 0.74, 0.72, 0.7, 0.68, 0.66, 0.64, 0.62, 0.59, 0.57, 0.55, 0.53, 0.5, 0.48, 0.46, 0.43, 0.41, 0.39, 0.36, 0.34, 0.32, 0.3, 0.27, 0.25, 0.23, 0.21, 0.19, 0.17, 0.16, 0.14, 0.12, 0.11, 0.09, 0.08, 0.07, 0.06, 0.04, 0.04, 0.03, 0.02, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.12, 0.13, 0.15, 0.17, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.41, 0.43, 0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.66, 0.68, 0.69, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.77, 0.78, 0.78, 0.78, 0.79, 0.79, 0.79, 0.79, 0.78, 0.78, 0.78, 0.77, 0.76, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.66, 0.65, 0.63, 0.62, 0.6, 0.58, 0.57, 0.55, 0.53, 0.51, 0.49, 0.47, 0.45, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.31, 0.29, 0.27, 0.25, 0.23, 0.21, 0.19, 0.17, 0.16, 0.14, 0.12, 0.11, 0.1, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0.02, 0.03, 0.03, 0.04, 0.05, 0.06, 0.08, 0.09, 0.1, 0.12, 0.13, 0.15, 0.17, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.33, 0.35, 0.37, 0.4, 0.42, 0.45, 0.47, 0.49, 0.52, 0.54, 0.57, 0.59, 0.61, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.77, 0.78, 0.8, 0.82, 0.83, 0.85, 0.86, 0.88, 0.89, 0.9, 0.91, 0.92, 0.92, 0.93, 0.93, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94, 0.93, 0.93, 0.92, 0.92, 0.91, 0.9, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.82, 0.81, 0.79, 0.78, 0.76, 0.75, 0.73, 0.71, 0.69, 0.68, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.53, 0.51, 0.49, 0.47, 0.45, 0.43, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.28, 0.26, 0.24, 0.22, 0.2, 0.19, 0.17, 0.15, 0.14, 0.13, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.04, 0.04, 0.04, 0.05, 0.06, 0.07, 0.07, 0.08, 0.09, 0.1, 0.12, 0.13, 0.14, 0.16, 0.17, 0.19, 0.2, 0.22, 0.24, 0.26, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.6, 0.62, 0.64, 0.65, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.74, 0.75, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.75, 0.75, 0.74, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.62, 0.61, 0.59, 0.58, 0.56, 0.55, 0.53, 0.51, 0.49, 0.48, 0.46, 0.44, 0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.29, 0.27, 0.25, 0.23, 0.21, 0.2, 0.18, 0.17, 0.15, 0.14, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.05, 0.04, 0.04, 0.04, 0.04, 0.03, 0.03, 0.04, 0.04, 0.04, 0.04, 0.05, 0.06, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.14, 0.15, 0.17, 0.18, 0.2, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.42, 0.44, 0.46, 0.48, 0.51, 0.53, 0.55, 0.57, 0.59, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.73, 0.75, 0.77, 0.78, 0.8, 0.81, 0.83, 0.84, 0.85, 0.86, 0.87, 0.87, 0.88, 0.89, 0.89, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.89, 0.89, 0.89, 0.88, 0.87, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.76, 0.75, 0.73, 0.72, 0.7, 0.68, 0.67, 0.65, 0.63, 0.61, 0.59, 0.58, 0.56, 0.54, 0.52, 0.5, 0.48, 0.46, 0.43, 0.41, 0.39, 0.37, 0.35, 0.34, 0.32, 0.3, 0.28, 0.26, 0.24, 0.23, 0.21, 0.19, 0.18, 0.17, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.07, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.06, 0.06, 0.06, 0.07, 0.07, 0.08, 0.09, 0.1, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.19, 0.2, 0.22, 0.24, 0.26, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.42, 0.45, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.57, 0.59, 0.61, 0.62, 0.64, 0.65, 0.66, 0.67, 0.69, 0.69, 0.7, 0.71, 0.72, 0.73, 0.73, 0.74, 0.74, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.74, 0.74, 0.73, 0.73, 0.72, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.62, 0.61, 0.6, 0.58, 0.57, 0.55, 0.54, 0.52, 0.5, 0.48, 0.47, 0.45, 0.43, 0.41, 0.39, 0.38, 0.36, 0.34, 0.32, 0.3, 0.28, 0.27, 0.25, 0.23, 0.22, 0.2, 0.19, 0.17, 0.16, 0.15, 0.13, 0.12, 0.11, 0.1, 0.1, 0.09, 0.08, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.07, 0.07, 0.07, 0.08, 0.09, 0.1, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.19, 0.2, 0.22, 0.24, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45, 0.47, 0.49, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.69, 0.71, 0.73, 0.74, 0.76, 0.77, 0.78, 0.79, 0.81, 0.81, 0.82, 0.83, 0.84, 0.84, 0.85, 0.85, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86, 0.85, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.76, 0.74, 0.73, 0.72, 0.7, 0.69, 0.67, 0.66, 0.64, 0.62, 0.6, 0.59, 0.57, 0.55, 0.53, 0.51, 0.49, 0.47, 0.45, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.32, 0.3, 0.28, 0.26, 0.24, 0.23, 0.21, 0.2, 0.18, 0.17, 0.16, 0.14, 0.13, 0.12, 0.11, 0.1, 0.1, 0.09, 0.08, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.07, 0.07, 0.08, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.17, 0.18, 0.19, 0.21, 0.23, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.56, 0.58, 0.6, 0.61, 0.63, 0.64, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.73, 0.74, 0.75, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.75, 0.75, 0.74, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.69, 0.67, 0.66, 0.65, 0.64, 0.62, 0.61, 0.59, 0.58, 0.56, 0.54, 0.53, 0.51, 0.49, 0.47, 0.45, 0.43, 0.41, 0.4, 0.38, 0.36, 0.34, 0.32, 0.3, 0.29, 0.27, 0.25, 0.24, 0.22, 0.21, 0.19, 0.18, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.09, 0.08, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.07, 0.07, 0.07, 0.08, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.19, 0.2, 0.22, 0.24, 0.26, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.43, 0.46, 0.47, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.63, 0.65, 0.67, 0.69, 0.7, 0.72, 0.73, 0.74, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.82, 0.83, 0.83, 0.84, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.84, 0.84, 0.83, 0.82, 0.82, 0.81, 0.8, 0.8, 0.79, 0.78, 0.77, 0.75, 0.74, 0.73, 0.71, 0.7, 0.68, 0.67, 0.65, 0.63, 0.62, 0.6, 0.58, 0.56, 0.54, 0.52, 0.5, 0.48, 0.46, 0.44, 0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.31, 0.29, 0.27, 0.25, 0.23, 0.22, 0.2, 0.19, 0.17, 0.16, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.07, 0.07, 0.06, 0.06, 0.05, 0.05, 0.04, 0.04, 0.04, 0.04, 0.04, 0.05, 0.05, 0.05, 0.06, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.18, 0.2, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.37, 0.39, 0.41, 0.43, 0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.58, 0.6, 0.62, 0.64, 0.65, 0.67, 0.68, 0.69, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.77, 0.78, 0.78, 0.79, 0.79, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.79, 0.79, 0.78, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7, 0.68, 0.67, 0.65, 0.64, 0.62, 0.6, 0.59, 0.57, 0.55, 0.53, 0.51, 0.49, 0.47, 0.45, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.31, 0.29, 0.28, 0.26, 0.24, 0.23, 0.21, 0.19, 0.18, 0.16, 0.15, 0.14, 0.12, 0.11, 0.1, 0.09, 0.09, 0.08, 0.07, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.04, 0.04, 0.05, 0.05, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08, 0.09, 0.1, 0.11, 0.13, 0.14, 0.15, 0.17, 0.18, 0.2, 0.22, 0.24, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.53, 0.55, 0.57, 0.59, 0.6, 0.62, 0.64, 0.66, 0.68, 0.69, 0.71, 0.72, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.82, 0.83, 0.83, 0.84, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.84, 0.83, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.76, 0.75, 0.73, 0.72, 0.71, 0.69, 0.67, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.54, 0.52, 0.5, 0.48, 0.46, 0.44, 0.42, 0.4, 0.38, 0.35, 0.34, 0.32, 0.29, 0.28, 0.26, 0.24, 0.22, 0.2, 0.19, 0.17, 0.15, 0.14, 0.13, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.03, 0.03, 0.04, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.11, 0.12, 0.14, 0.15, 0.17, 0.19, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.38, 0.4, 0.42, 0.44, 0.46, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67, 0.68, 0.7, 0.71, 0.73, 0.74, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.82, 0.83, 0.84, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.83, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.75, 0.74, 0.72, 0.71, 0.69, 0.67, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.54, 0.52, 0.49, 0.47, 0.45, 0.43, 0.41, 0.39, 0.36, 0.34, 0.32, 0.3, 0.28, 0.26, 0.24, 0.22, 0.21, 0.19, 0.17, 0.16, 0.14, 0.13, 0.11, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.03, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.11, 0.12, 0.14, 0.15, 0.17, 0.19, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31, 0.33, 0.35, 0.38, 0.4, 0.42, 0.45, 0.47, 0.49, 0.51, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67, 0.69, 0.7, 0.72, 0.73, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.83, 0.84, 0.84, 0.85, 0.85, 0.85, 0.85, 0.86, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.83, 0.82, 0.82, 0.81, 0.8, 0.79, 0.77, 0.76, 0.75, 0.73, 0.72, 0.7, 0.68, 0.66, 0.65, 0.63, 0.61, 0.59, 0.56, 0.54, 0.52, 0.5, 0.48, 0.46, 0.43, 0.41, 0.39, 0.37, 0.35, 0.33, 0.3, 0.28, 0.26, 0.24, 0.22, 0.2, 0.19, 0.17, 0.15, 0.14, 0.12, 0.1, 0.09, 0.08, 0.07, 0.05, 0.04, 0.03, 0.03, 0.02, 0.01, 0, 0, 0, -0.01, -0.01, -0.01, -0.01, -0.01, 0, 0, 0.01, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.08, 0.09, 0.11, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.27, 0.29, 0.31, 0.33, 0.36, 0.38, 0.41, 0.43, 0.46, 0.48, 0.5, 0.53, 0.55, 0.57, 0.59, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.73, 0.75, 0.77, 0.78, 0.8, 0.81, 0.82, 0.83, 0.85, 0.86, 0.86, 0.87, 0.88, 0.89, 0.89, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.89, 0.89, 0.88, 0.88, 0.87, 0.86, 0.85, 0.84, 0.82, 0.81, 0.8, 0.78, 0.77, 0.75, 0.73, 0.71, 0.69, 0.67, 0.65, 0.63, 0.61, 0.58, 0.56, 0.54, 0.52, 0.49, 0.47, 0.45, 0.42, 0.4, 0.37, 0.35, 0.33, 0.31, 0.28, 0.26, 0.24, 0.22, 0.2, 0.18, 0.16, 0.15, 0.13, 0.11, 0.1, 0.08, 0.07, 0.06, 0.04, 0.04, 0.03, 0.02, 0.01, 0, -0.01, -0.01, -0.01, -0.02, -0.02, -0.02, -0.02, -0.01, -0.01, -0.01, 0, 0.01, 0.01, 0.03, 0.04, 0.05, 0.06, 0.07, 0.09, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.29, 0.31, 0.33, 0.36, 0.38, 0.4, 0.43, 0.45, 0.47, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.71, 0.73, 0.74, 0.76, 0.77, 0.78, 0.8, 0.81, 0.82, 0.82, 0.83, 0.84, 0.84, 0.85, 0.85, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86, 0.85, 0.85, 0.84, 0.83, 0.83, 0.82, 0.81, 0.8, 0.78, 0.77, 0.76, 0.74, 0.72, 0.71, 0.69, 0.67, 0.65, 0.63, 0.61, 0.59, 0.57, 0.55, 0.53, 0.5, 0.48, 0.46, 0.43, 0.41, 0.39, 0.37, 0.34, 0.32, 0.3, 0.28, 0.26, 0.23, 0.21, 0.2, 0.18, 0.16, 0.14, 0.12, 0.11, 0.09, 0.08, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01, 0, -0.01, -0.01, -0.02, -0.02, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.02, -0.01, -0.01, 0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.08, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19, 0.21, 0.24, 0.26, 0.28, 0.31, 0.33, 0.36, 0.39, 0.41, 0.44, 0.46, 0.49, 0.51, 0.54, 0.56, 0.59, 0.61, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.81, 0.83, 0.84, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.93, 0.94, 0.94, 0.94, 0.95, 0.95, 0.95, 0.94, 0.94, 0.94, 0.93, 0.93, 0.92, 0.91, 0.9, 0.89, 0.88, 0.86, 0.85, 0.84, 0.82, 0.8, 0.78, 0.77, 0.74, 0.72, 0.7, 0.68, 0.66, 0.64, 0.61, 0.59, 0.56, 0.54, 0.51, 0.49, 0.46, 0.44, 0.41, 0.39, 0.36, 0.34, 0.32, 0.29, 0.27, 0.25, 0.23, 0.2, 0.18, 0.16, 0.14, 0.13, 0.11, 0.09, 0.08, 0.06, 0.05, 0.03, 0.02, 0.01, 0, -0.01, -0.02, -0.02, -0.03, -0.03, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.03, -0.03, -0.02, -0.01};

// Strings to hold the current state and sensor information
const int lenString = 25;
char StateString[lenString] = " ";
char SensorString[lenString] = " ";
char prevStateString[lenString] = " ";
char prevSensorString[lenString] = " ";


//counter for log
unsigned long logCount = 0;


// Run initial setup of variables
void setup() {
  test();
  // Start serial connection so that we can print to the LCD screen for testing
  Serial.begin(115200);
 
  lcd.begin(16, 2);     // set up the LCD's number of columns and rows
  lcd.setRGB(0, 255, 0); // make lcd green initially

  // Set the various digital input pins
  pinMode( InHigh, INPUT );
  pinMode( InLow, INPUT );
  pinMode( InRef, INPUT );
  pinMode( echoPin, INPUT ); # Ultrasonic sensor

  // Set the various digital output pins
  pinMode( HighLED, OUTPUT );
  pinMode( LowLED, OUTPUT );
  pinMode( triggerPin, OUTPUT ); # Ultrasonic sensor
  start = true;

  // These variables will be used later to change whether the tide pool is filling or emptying
  LowTide = digitalRead(InLow);
  HighTide = digitalRead(InHigh);

  dumpState(0, "");              // print current state

  // currentTideIndex = 0;   // ensure start at the first tide level;

  // Attaches tideServo to pin 5 = tidePWMpin
  tideServo.attach(tidePWMpin);  
  // Attaches tideServo to pin 11 = rayPWMpin
  rayServo.attach(rayPWMpin);  
  // Set the servos to default (neutral) mode - which just cycles water in same tank  
  tideNeutral();
}

void dumpState(long currentTime, String msg) {
  /* Prints state to serial monitor */
  Serial.print(F("Time "));
  Serial.println(currentTime);
  // ensure these are correct
  Serial.print(F("TideInterval "));
  Serial.println(TideInterval);
  Serial.print(F("PumpOnTime "));
  Serial.println(pumpOnTime);
  Serial.print(F("PumpOffTime "));
  Serial.println(pumpOffTime);

  Serial.println(msg);
  Serial.print(F("The variable PumpOn is "));
  Serial.println(PumpOn);
  Serial.print(F("The variable Rising is "));
  Serial.println( Rising );
  Serial.print(F("   FYI: High Water Sensor = "));
  Serial.println(sensorHigh);
  Serial.print("   FYI: Low Water Sensor = ");
  Serial.println(sensorLow);
  Serial.print(F("   FYI: Reference Sensor = "));
  Serial.println(sensorRef);
  Serial.println();

  /*Serial.println(F("Starting state of the memory:"));
  MEMORY_PRINT_START
  MEMORY_PRINT_HEAPSTART
  MEMORY_PRINT_HEAPEND
  MEMORY_PRINT_STACKSTART
  MEMORY_PRINT_END
  MEMORY_PRINT_HEAPSIZE
  FREERAM_PRINT;
  Serial.println(F("Ending state of the memory"));*/
}

// Turns on Neutral for 5 seconds followed by 
// Tide in for 5 seconds then tideOut for 5 seconds.
void test(){
  tideNeutral();
  delay(5000);
  tideIn();
  delay(5000);
  tideOut();
  delay(5000);
  
}

//tide neutral water goes into both tanks
void tideNeutral(){
  tideServo.write(0);
  rayServo.write(90);
}


//move water from ray tank to tidepool
void tideIn(){
  tideNeutral();
  tideServo.write(0);
  rayServo.write(0);  
}

//move water out of the tidepool into the ray tank
void tideOut(){
  tideNeutral();
  tideServo.write(90);
  rayServo.write(90);
}

String getTWaterDepth(){
  String depth = "22";
  return depth;
}

String getRWaterDepth(){
  String depth = "9";
  return depth;
}

String getTotalVolume(){
  String volume = "600";
  return volume;
}

String getTide(){
  String tide = "outgoing";
  return tide;
}

String getAvTemp(){
  String tmp = "21";
  return tmp;
}

//create and send log files to PI
void sendLog(){
  String logStr = "LOG,22,9,600,outgoing,21";
  Serial.begin(9600);

  logStr = "LOG," + getTWaterDepth();
  logStr += "," + getRWaterDepth();
  logStr += "," + getTotalVolume();
  logStr += "," + getTide();
  logStr += "," + getAvTemp();

  Serial.println(logStr);
  Serial.begin(115200);  
  }


// Main program
void loop() {
  //test();

  
  //check logCount
  if(logCount == 360000){
    sendLog();
    logCount = 0;
  }
  else{
    logCount++;
  }
  
  // Read the current time... everything is testing time intervals.
  unsigned long currentTime = millis();
  Serial.println(currentTime/1000);
  /*Serial.print(currentTime);
  Serial.print(" ");
  Serial.print(lastTimePulseHigh);
  Serial.print(" ");
  Serial.println(pulseDelay);*/
  
  // If you are at High or Low tide you need to wait until the tide interval is complete.  The time has to reach
  // the end of the TideInterval.

  // initializes variables at the start of a rising or falling tide
  if ( currentTime - startTime >= TideInterval || start || startTime > currentTime) {
    Serial.println(F("In tide change"));
    
    // turn both pumps off initially
    // and every single time change tide, turn off both pumps, will be turn on/off later in code
    //digitalWrite( PumpFill, writePumpOff);
    //digitalWrite( PumpDrain, writePumpOff);

    tideNeutral();
    
    start = false;          // start variable makes sure this loop is executed at the beginning when t=0

    Serial.println(F("In tide change, checking high tide"));
    if ( HighTide ) {
      HighTide = false;
      Rising = false;
    } else if ( LowTide ) {
      LowTide = false;
      Rising = true;
    } else {
      Rising = !Rising;      // possibly the high and low tide sensor switches never get triggered
      // in the tide interval (testing-situation)
    }

    startTime = currentTime;  // Reset the start of the tide cycle
    previousTime = currentTime;

    PumpOn = false;            // Turn the pump off. In five minutes, the pump will be on
    blinkLED = blinkFast;

    Serial.println(F("In tide change, updating LCD screen"));
    // update LCD Screen
    if (Rising) {
      Serial.println(F("in tide change, Updating State Message"));
      strncpy(StateString, "TidePool Drained", lenString);
      Serial.print(currentTime);
      Serial.println(StateString);
      Serial.println(F("In tide change, updating tidepool drained"));
      dumpState(currentTime, "TidePool Drained");
    }
    else {
      strncpy(StateString, "TidePool Full", lenString);
      Serial.print(currentTime);
      Serial.println(StateString);
      dumpState(currentTime, "Tidepool Full");
    }
    Serial.println(F("Leaving tide change"));
  }

  // Now we need to check our sensors.... but make sure to debounce the readings
  //
  int readingSensorHigh = digitalRead(InHigh);
  int readingSensorLow = digitalRead(InLow);
  int readingSensorRef = digitalRead(InRef);

  // Check to see if the switches changed state due to either noise or water level
  //
  Serial.println(F("Checking Sensors"));
  if ( readingSensorHigh != lastSensorHigh ) {
    // Set the time and then we will will wait to see if the state change is stable
    lastTimeHigh = currentTime;
  }
  // If enough time has passed then the sensor is not fluctuating
  if ( (currentTime - lastTimeHigh) > debounceDelay ) {
    if ( readingSensorHigh != sensorHigh )
      sensorHigh = readingSensorHigh;
  }
  lastSensorHigh = readingSensorHigh;

  if ( readingSensorLow != lastSensorLow ) {
    // Set the time and then we will will wait to see if the state change is stable
    lastTimeLow = currentTime;
  }
  // If enough time has passed then the sensor is not fluctuating
  if ( (currentTime - lastTimeLow) > debounceDelay ) {
    if ( readingSensorLow != sensorLow )
      sensorLow = readingSensorLow;
  }
  lastSensorLow = readingSensorLow;

  if ( readingSensorRef != lastSensorRef ) {
    // Set the time and then we will will wait to see if the state change is stable
    lastTimeRef = currentTime;
  }
  // If enough time has passed then the sensor is not fluctuating
  if ( (currentTime - lastTimeRef) > debounceDelay ) {
    if ( readingSensorRef != sensorRef ) {
      sensorRef = readingSensorRef;
      // If Sensor reading switched than print out an update
      Serial.print(F("Reference Sensor = "));
      Serial.println(sensorRef);
    }
  }
  lastSensorRef = readingSensorRef;

  /*
      Add a user programming feature here where you could action based on both triggers set.
      Could enter program mode with input set by toggling switches.
      Not implemented yet...
  */

  // Set the HighTide or LowTide boolean values and then turn off the appropriate pump
  // Indicator light: solid LED if a sensor is set, blink the HighLED if you are Rising
  // and blink the LowLED if you are not Rising
  //
  Serial.println(F("Setting High and Low Tide"));
  if ( sensorHigh == HIGH ) {
    HighTide = true;
    digitalWrite( HighLED, HIGH);
    Serial.println(F("Setting High and Low Tide, Made LED High"));
    strncpy(SensorString, "HIGH WATER!", lenString);
    Serial.println(F("Setting High and Low Tide, Made LED High, Updated Sensor String"));
  } else {
    HighTide = false;
    digitalWrite( HighLED, LOW);
    Serial.println(F("Setting High and Low Tide, Made LED LOW"));
  }

  Serial.println(F("Check sensor Low == HIGH"));
  if (sensorLow == HIGH) {
    LowTide = true;
    digitalWrite( LowLED, HIGH);
    
    strncpy(SensorString, "LOW WATER!", lenString);
  } else {
    LowTide = false;
    digitalWrite( LowLED, LOW);
  }

  if (sensorLow == LOW and sensorHigh == LOW) {
    Serial.println(F("Update sensor message to null"));
    
    strncpy(SensorString, " ", lenString);
    Serial.println(F("Finish Update"));
  }

  Serial.println(F("Check if sensor Error"));
  // if both the low sensor and high sensor are tripped, we have an error
  if (sensorLow == HIGH and sensorHigh == HIGH) {
    strncpy(SensorString, "SENSOR ERROR!", lenString);
  }

  Serial.println(F("Blink indicator light"));
  // Blink the indicator LED if it is not high or low tide
  if ( !HighTide && !LowTide ) {
    if ( (currentTime - timeLED) >= blinkLED ) {
      // if the LED is off turn it on and vice-versa:
      if ( stateLED == LOW) {
        stateLED = HIGH;
      } else {
        stateLED = LOW;
      }
      timeLED = currentTime;
    }
    if ( Rising ) {
      digitalWrite( HighLED, stateLED);
    } else {
      digitalWrite( LowLED, stateLED);
    }
  }


  /*
      Need to wait until the High or Low tide time interval has been met. Then start a pump.
      We want to cycle the correct pump on and off with the cycle time.
      PumpFill fills the pool
      PumpDrain empties the pool
  */

  Serial.println(F("Checking Rising & !HighTide"));
  if ( Rising ) {
    // if in high tide turn pump off
    // if not high tide, switch between turning the pump on and off
    if ( HighTide ) {
      // only turn off if the pump has been on longer than pumpOnTime
      if ((currentTime - previousTime) >= pumpOnTime) {
        PumpOn = false;
        previousTime = currentTime;

        
        strncpy(StateString, "Stop fill High Tide", lenString);   
        Serial.print(currentTime);
        Serial.println(StateString);
      }
    } else if ( PumpOn && (currentTime - previousTime) >= pumpOnTime ) {
      PumpOn = false;
      blinkLED = blinkSlow;
      previousTime = currentTime;

      strncpy(StateString, "Pause Filling T", lenString);
      Serial.print(currentTime);
      Serial.println(StateString);
    } else if ( !PumpOn && (currentTime - previousTime) >= pumpOffTime ) {
      PumpOn = true;
      blinkLED = blinkFast;
      previousTime = currentTime;

      // print if is filling
      strncpy(StateString, "Filling Tidepool", lenString);
      Serial.print(currentTime);
      Serial.println(StateString);
    }

    if ( PumpOn ) {
      // Pump stays on for the pumpOnTime
      //digitalWrite( PumpFill, writePumpOn);
      tideIn();
    } else {
      // Pump stays off for the pumpOffTime
      //digitalWrite( PumpFill, writePumpOff);
      tideNeutral();
    }
  }

  Serial.println(F("Not Rising"));
  if ( !Rising ) {
    if ( LowTide ) {
      if ((currentTime - previousTime) >= pumpOnTime) {
        PumpOn = false;
        previousTime = currentTime;

        strncpy(StateString, "Stop drain low tide", lenString);
        Serial.print(currentTime);
        Serial.println(StateString);
      }
    } else if ( PumpOn && (currentTime - previousTime) >= pumpOnTime ) {
      PumpOn = false;
      blinkLED = blinkSlow;
      previousTime = currentTime;

      // print if paused draining
      
      strncpy(StateString, "Pause Draining Tidepool", lenString);
      Serial.print(currentTime);
      Serial.println(StateString);
    } else if ( !PumpOn && (currentTime - previousTime) >= pumpOffTime ) {
      PumpOn = true;
      blinkLED = blinkFast;
      previousTime = currentTime;

      // print if is draining
      strncpy(StateString, "Draining Tidepool", lenString);
      Serial.print(currentTime);
      Serial.println(StateString);
    }

    Serial.println(F("in Draining, checking if pumpon"));
    if ( PumpOn ) {
      // Pump stays on for the pumpOnTime
      //digitalWrite(PumpDrain, writePumpOn);
      tideOut();    
    } else {
      // Pump stays off for the pumpOffTime
      //digitalWrite(PumpDrain, writePumpOff);
      tideNeutral();
    }
  }

  Serial.println(F("Checking state string"));

  /* Update LCD Screen if the state or sensor strings are different */
  
  // state goes on first row of LCD screen
  Serial.println(StateString);
  Serial.println(prevStateString);
  if (strcmp(StateString, prevStateString) != 0 && (currentTime - lastTimeLCDUpdated) > lcdDelay) {
    strncpy(prevStateString, StateString, lenString);  // update previous stateString for comparison later
    lastTimeLCDUpdated = currentTime;

    Serial.println(prevStateString);
    Serial.println(F("Setting cursor"));
    lcd.setCursor(0,0);
    // pad remaining with spaces as to overwrite old message
    Serial.println(F("Printing String"));
    if (strlen(StateString) > 16) StateString[16] = '\0';           // shortens string to 16 characters
    lcd.print(StateString);
    Serial.println(F("padding string"));
    for(int i = strlen(StateString); i < 16; i++) { 
      Serial.print(" For i");
      Serial.print(i);
      lcd.print(' ');                       // add spaces to overwrite previous state
    }
  } // end if StateString different

  if (strcmp(SensorString, prevSensorString) != 0  && (currentTime - lastTimeLCDUpdated) > lcdDelay) {
    strncpy(prevSensorString, SensorString, lenString);  // update previous stateString for comparison later
    lastTimeLCDUpdated = currentTime;
    
    Serial.println(F("inside sensor update"));
    lcd.setCursor(0,1);                   // sensor info goes on second row of LCD
    // pad remaining with spaces as to overwrite old message
    Serial.println(F("Printing String"));
    if (strlen(SensorString) > 16)  SensorString[16] = '\0';           // shortens string to 16 characters
    lcd.print(SensorString);
    Serial.println(F("padding string"));
    for(int i = strlen(SensorString); i < 16; i++) { 
      Serial.print(" For i");
      Serial.print(i);
      lcd.print(' ');                       // add spaces to overwrite previous state
    }
    
    Serial.println(F("Updating colors"));
    // update color to show errors
    if (SensorString[0] == ' ') {
      lcd.setRGB(0, 255, 0);               // no message, so no sensor triggered therefore green
    }
    else if (strcmp(SensorString, "SENSOR ERROR!") == 0) {
        lcd.setRGB(255, 0, 0);           // has error, turn background red
    } else {
        lcd.setRGB(0, 0, 255);          // high or low sensor triggered, turn background blue
    }
  } // end sensor string update

  // update online log with water level
  if((currentTime - lastTimeUpdated) > delayUpdate) {
    Serial.println(F("Updating online water level"));
    float duration, distance;
    
    // send ultrasonic pulse
    digitalWrite(triggerPin, LOW);
    delayMicroseconds(2);
    digitalWrite(triggerPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(triggerPin, LOW);
    
    // see how long pulse takes to return to echo pin
    duration = pulseIn(echoPin, HIGH, 50000);
    distance = (duration / 2) / 29.1;    // Change time to get pulse back to centimeters
    Serial.print("duration->");
    Serial.println(duration);
    
    // save count to the 'distance' feed on Adafruit IO
    Serial.print("level sending -> ");
    Serial.println(distance);
    //ultrasonicSensorFeed->save(distance);

    // sending message to Wi-Fi chip by printing
    //WiFiESP.print(distance);        // note new line character signifies end of message
    //WiFiESP.print("\n");            // signifies end of message

    // update last time updated
    lastTimeUpdated = currentTime;
  }
  
}
// End of void() loop

float tideShouldBe(float tideData) {
  /* Returns what our representative tidal level should be.
    In our model, the tidal data ranges from 0-0.433 meters (0-17 inches)
    If the tidal data is out of that range, it returns the maximum or minimum
    level
  */
  const float MAXTIDE = 0.44;
  const float MINTIDE = 0;

  if (tideData < MINTIDE) {
    return MINTIDE;
  }
  else if (tideData > MAXTIDE) {
    return MAXTIDE;
  }
  else {
    return tideData;
  }
} // end tideShouldBe
